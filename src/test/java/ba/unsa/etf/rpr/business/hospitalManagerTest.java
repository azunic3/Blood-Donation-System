package ba.unsa.etf.rpr.business;

import ba.unsa.etf.rpr.Dao.DaoFactory;
import ba.unsa.etf.rpr.Dao.HospitalDaoSQLImpl;
import ba.unsa.etf.rpr.Domain.Hospital;
import ba.unsa.etf.rpr.Exceptions.BloodException;
import org.apache.commons.lang3.RandomStringUtils;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.MockedStatic;
import org.mockito.Mockito;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import static org.mockito.Mockito.when;

/**
 * @author Azra Žunić
 * version 1.0
 */
public class hospitalManagerTest {
//    private HospitalManager hospitalManager;
//    private Hospital hospital;
//    private HospitalDaoSQLImpl hospitalDaoSQLMock;
//    private List<Hospital> h;
//    /**
//     * This method will be called before each test method
//     */
//    @BeforeEach
//    public void initializeObjectsWeNeed(){
//        hospitalManager = Mockito.mock(HospitalManager.class);
//        hospital = new Hospital();
//        hospital.setId(50);
//        hospital.setName("Sanasa");
//        hospital.setQuantityOnHand(25);
//        hospital.setAdress("Grbavicka 15");
//        hospital.setContactNumber (448552);
//
//        hospitalDaoSQLMock = Mockito.mock(HospitalDaoSQLImpl.class);
//        h = new ArrayList<>();
//        h.addAll(Arrays.asList(new Hospital("Poliklinika1"), new Hospital("Poliklinika2")));
//    }
//    /**
//     * In this method we will test validateHospitalName(String name) for correct and incorrect passed parameters
//     * there is a mock setup stage and test stage
//     */
//    @Test
//    void validateHospitalName() throws BloodException {
//        String correctName = "Sunce";
//        try {
//            Mockito.doCallRealMethod().when(hospitalManager).validateHospitalName(correctName);
//        } catch (BloodException e) {
//            e.printStackTrace();
//            Assertions.assertTrue(false);
//        }
//
//        String incorrectNameShort = "Sun";
//        Mockito.doCallRealMethod().when(hospitalManager).validateHospitalName(incorrectNameShort);
//        BloodException bloodException1 = Assertions.assertThrows(BloodException.class, () -> {
//            hospitalManager.validateHospitalName(incorrectNameShort);}, "Name must contain between 4 and 20 characters");
//        Assertions.assertEquals("Name must contain between 4 and 20 characters", bloodException1.getMessage());
//
//        String incorrectNameLong = RandomStringUtils.randomAlphabetic(50);
//        Mockito.doCallRealMethod().when(hospitalManager).validateHospitalName(incorrectNameLong);
//        BloodException bloodException2 = Assertions.assertThrows(BloodException.class, () -> {
//            hospitalManager.validateHospitalName(incorrectNameLong);}, "Name must contain between 4 and 20 characters");
//        Assertions.assertEquals("Name must contain between 4 and 20 characters", bloodException2.getMessage());
//    }
//    /**
//     * We are testing add() method. Trying to add type that already exists
//     * An exception will be thrown because our instance of Hospital.java class has value for id
//     */
//    @Test
//    void add() throws BloodException {
//        MockedStatic<DaoFactory> daoFactoryMockedStatic = Mockito.mockStatic(DaoFactory.class);
//        daoFactoryMockedStatic.when(DaoFactory::hospitalDao).thenReturn(hospitalDaoSQLMock);
//
//        when(DaoFactory.hospitalDao().getAll()).thenReturn(h);
//        Mockito.doCallRealMethod().when(hospitalManager).add(hospital);
//        BloodException bloodException = Assertions.assertThrows(BloodException.class, () -> {
//            hospitalManager.add(hospital);}, "Can't add hospital with ID. ID is autogenerated");
//
//        Assertions.assertEquals("Can't add hospital with ID. ID is autogenerated", bloodException.getMessage());
//        daoFactoryMockedStatic.verify(DaoFactory::hospitalDao);
//        Mockito.verify(hospitalManager).add(hospital);
//        daoFactoryMockedStatic.close();
//    }
//
//    /**
//     * Testing if we can add a new hospital name
//     */
//    @Test
//    void addNewHospital() throws BloodException {
//        Hospital newType = new Hospital("SAN");
//        hospitalManager.add(newType);
//
//        Assertions.assertTrue(true);
//        Mockito.verify(hospitalManager).add(newType);
//    }
}
