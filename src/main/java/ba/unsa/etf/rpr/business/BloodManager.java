package ba.unsa.etf.rpr.business;

import ba.unsa.etf.rpr.Dao.DaoFactory;
import ba.unsa.etf.rpr.Domain.Blood;
import ba.unsa.etf.rpr.Domain.Hospital;
import ba.unsa.etf.rpr.Exceptions.BloodException;

import java.util.Date;
import java.util.List;
/**
 * Business Logic Layer for table Blood
 * @author Azra Žunić
 */
public class BloodManager {
    /**
     *
     * @param name
     * @throws BloodException
     */
    public void validateBloodType(String name) throws BloodException{
        if (name == null || name.length() > 3 || name.length() < 2){
            throw new BloodException("Blood type must contain between 2 and 3 characters");
        }
    }

    /**
     *
     * @return
     * @throws BloodException
     */
    public List<Blood> getAll() throws BloodException{
        return DaoFactory.bloodDao().getAll();
    }

    /**
     *
     * @param b
     * @return
     * @throws BloodException
     */
    public Blood add(Blood b) throws BloodException {
        if (b.getId() != 0){
            throw new BloodException("Can't add information with ID. ID is autogenerated");
        }
        validateBloodType(b.getBloodGroup());

        try{
            return DaoFactory.bloodDao().add(b);
        }catch (BloodException e){
            if (e.getMessage().contains("UQ_BloodBagNumber")){
                throw new BloodException("Information with the same blood bag number exists");
            }
            throw e;
        }
    }

    /**
     *
     * @param b
     * @return
     * @throws BloodException
     */
    public Blood update(Blood b) throws BloodException{
        validateBloodType(b.getBloodGroup());
        return DaoFactory.bloodDao().update(b);
    }

    /**
     *
     * @param fk_hospital_id
     * @throws BloodException
     */
    public void delete(int fk_hospital_id) throws BloodException{
        try{
            DaoFactory.bloodDao().delete(fk_hospital_id);
        }catch (BloodException e){
            if (e.getMessage().contains("FOREIGN KEY")){
                throw new BloodException("Cannot delete hospital which is related to blood. First delete related rows from hospital.");
            }
            throw e;
        }

    }

    /**
     *
     * @param hospital
     * @return
     * @throws BloodException
     */
    public List<Blood> searchByHospital(Hospital hospital) throws BloodException{
        return DaoFactory.bloodDao().searchByHospital(hospital);
    }

    /**
     *
     * @param id
     * @return
     * @throws BloodException
     */
    public Blood getById(int id) throws BloodException {
        return DaoFactory.bloodDao().getById(id);
    }

}
