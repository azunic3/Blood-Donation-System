package ba.unsa.etf.rpr.business;

import ba.unsa.etf.rpr.Dao.DaoFactory;
import ba.unsa.etf.rpr.Domain.Hospital;
import ba.unsa.etf.rpr.Exceptions.BloodException;

import java.util.List;
/**
 * Business Logic Layer for Hospitals
 * @author Azra Žunić
 */

public class HospitalManager {
    /**
     * validation of hospitals name, used for tests
     * @param name
     * @throws BloodException
     */
    public static void validateHospitalName(String name) throws BloodException{
        if (name == null || name.length() > 20 || name.length() < 4){
            throw new BloodException("Name must contain between 4 and 20 characters");
        }
    }
    public static void validateQuantity(int numb) throws BloodException{
        if(numb<0 || numb==0)
            throw new BloodException("There must be at least one bag of every blood type in every hospital");
    }

    /**
     * method updates information about hospitals
     * @param hosp
     * @throws BloodException
     */
    public Hospital update(Hospital hosp) throws BloodException {
        validateHospitalName(hosp.getName());
        return DaoFactory.hospitalDao().update(hosp);
    }


    /**
     * adding new hospital in db
     * @param b
     * @return
     * @throws BloodException
     */
    public static Hospital add(Hospital b) throws BloodException {
        if (b.getId() != 0){
            throw new BloodException("Can't add hospital with ID. ID is autogenerated");
        }
        validateHospitalName(b.getName());
        try{
            return DaoFactory.hospitalDao().add(b);
        }catch (BloodException e){
            if (e.getMessage().contains("UQ_Name")){
                throw new BloodException("Hospital with the same name exists");
            }
            throw e;
        }
    }

    /**
     * getting all information about hospitals from db
     * @return
     * @throws BloodException
     */
    public List<Hospital> getAll() throws BloodException {
        return DaoFactory.hospitalDao().getAll();
    }

    /**
     * delete method
     * @param id
     * @throws BloodException
     */
    public void delete(int id) throws BloodException{
        DaoFactory.hospitalDao().delete(id);
    }

    /**
     * @param Hospital_id
     * @throws BloodException
     */
    public Hospital getById(int Hospital_id) throws BloodException{
        return DaoFactory.hospitalDao().getById(Hospital_id);
    }


    /**
     * searching by name
     * @param name
     * @return information about hospital named as a parameter
     * @throws BloodException
     */
    public Hospital searchByName(String name) throws BloodException {
        return DaoFactory.hospitalDao().searchByName(name);
    }

}
