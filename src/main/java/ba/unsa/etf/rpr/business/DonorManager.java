package ba.unsa.etf.rpr.business;

import ba.unsa.etf.rpr.Dao.DaoFactory;
import ba.unsa.etf.rpr.Domain.Donor;
import ba.unsa.etf.rpr.Exceptions.BloodException;
import java.time.LocalDate;
import java.util.List;
/**
 * Business Logic Layer for management of Donors
 * @author Azra Žunić
 */
public class DonorManager {
    /**
     * validation method for tests
     * @param name
     * @throws BloodException
     */
    public static void validateDonorsName(String name) throws BloodException{
        if (name == null || name.length() < 3 || name.length() >30) {
            throw new BloodException("Name must contain between 3 and 30 characters");
        }
    }

    /**
     * simple method that validates attribute used for tests
     * @param gen
     * @throws BloodException
     */
    public static void validateGender(String gen) throws BloodException{
        if(gen==null || gen.length()>1 || gen!="F" || gen!="M")
            throw new BloodException("Incorrect gender option!");
    }

    /**
     * similar method for validation
     * @param don
     * @throws BloodException
     */
    public static void validateADonated(String don) throws BloodException{
        if(don==null || don.length()>3 || don.length()<2){
            throw new BloodException("An answer must be either 'YES' or 'NO'");
        }
    }

    /**
     * validation of attributes used for tests
     * @param pass
     * @throws BloodException
     */
    public static void validatePassword(String pass ) throws BloodException{
        if(pass == null || pass.length()<6 || pass.length()>20){
            throw new BloodException("Password cannot be shorter than 6 signs nor longer than 20 signs!");
        }
    }

    /**
     * method used for tests
     * @param date
     * @return
     */
    private static boolean validateDateOfBirth(LocalDate date){
        int y=date.getYear();
        int m=date.getMonthValue();
        int d=date.getDayOfMonth();
        if((m == 1 || m == 3 || m == 5 || m == 7 || m == 8 || m == 10 || m == 12) && d > 31)
            return false;
        else if(d > 30)
            return false;
        return true;
    }

    /**
     * add method
     * @param b
     * @return
     * @throws BloodException
     */
    public Donor add(Donor b) throws BloodException {
        if (b.getId() != 0){
            throw new BloodException("Can't add donor with ID. ID is autogenerated");
        }
        validateDonorsName(b.getFullName());

        try{
            return DaoFactory.donorDao().add(b);
        }catch (BloodException e){
            if (e.getMessage().contains("UQ_FullName")){
                throw new BloodException("Donor with the same name exists");
            }
            throw e;
        }
    }

    /**
     *
     * @param name
     * @return
     * @throws BloodException
     */
    public static Donor searchByDonorsName(String name) throws BloodException {
        return DaoFactory.donorDao().searchByDonorsName(name);
    }

    /**
     * searcing by ID
     * @param Id
     * @return
     * @throws BloodException
     */
    public Donor searchById(int Id) throws BloodException{
        return DaoFactory.donorDao().getById(Id);
    }

    /**
     * @return
     * @throws BloodException
     */
    public List<Donor> getAll() throws BloodException{
        return DaoFactory.donorDao().getAll();
    }

    /**
     *
     * @param Donor_id
     * @return
     * @throws BloodException
     */
    public Donor getById(int Donor_id) throws BloodException {
        return DaoFactory.donorDao().getById(Donor_id);
    }

    /**
     *
     * @param text
     * @return
     * @throws BloodException
     */
    public static List<Donor> searchDonors(String text) throws BloodException {
        return (DaoFactory.donorDao().searchByName(text));
    }
}
