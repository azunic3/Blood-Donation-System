package ba.unsa.etf.rpr.business;

import ba.unsa.etf.rpr.Dao.DaoFactory;
import ba.unsa.etf.rpr.Domain.Donor;
import ba.unsa.etf.rpr.Exceptions.BloodException;

import java.sql.SQLException;
import java.util.List;
/**
 * Business Logic Layer for management of Donors
 * @author Azra Žunić
 */
public class DonorManager {
    /**
     * validation method for tests
     * @param Name, Password
     * @return true or false whether the donor passes validation
     * @throws BloodException
     */

public static boolean validateDonor(String Name, String Password) {
    try {
        Donor u= DaoFactory.donorDao().searchByDonorsName(Name);
        if(u.getPassword()==Password)
            return true;
    } catch (BloodException e) {
        return false;
    }
    return true;
}

    /**
     * update method used for mocking tests
     * @param donor
     * @throws BloodException
     */
    public Donor update(Donor donor) throws BloodException {
//        validateDonor(donor.getFullName(), donor.getPassword());
        return DaoFactory.donorDao().update(donor);
    }

    /**
     * similar method for validation
     * @param don
     * @throws BloodException
     */
    public static void validateADonated(String don) throws BloodException{
        if(don==null || don!="YES" || don!="NO"){
            throw new BloodException("An answer must be either 'YES' or 'NO'");
        }
    }

    /**
     * validation of attributes used for tests
     * @param pass
     * @throws BloodException
     */
    public static void validatePassword(String pass ) throws BloodException{
        if(pass == null || pass.length()<6 || pass.length()>20){
            throw new BloodException("Password cannot be shorter than 6 signs nor longer than 20 signs!");
        }
    }

    /**
     * add method, adding new donors in database
     * @param b
     * @throws BloodException
     */
    public Donor add(Donor b) throws BloodException, SQLException {
        if (b.getId() != 0){
            throw new BloodException("Can't add donor with ID. ID is autogenerated");
        }
        validateDonor(b.getFullName(), b.getPassword());
        try{
            return DaoFactory.donorDao().add(b);
        }catch (BloodException e){
            if (e.getMessage().contains("UQ_FullName")){
                throw new BloodException("Donor with the same name exists");
            }
            throw e;
        }
    }

    /**
     * searching method that uses name as a criteria
     * @param name
     * @throws BloodException
     */
    public static Donor searchByDonorsName(String name) throws BloodException {
        return DaoFactory.donorDao().searchByDonorsName(name);
    }

    /**
     * searcing by ID
     * @param Id
     * @throws BloodException
     */
    public Donor searchById(int Id) throws BloodException{
        return DaoFactory.donorDao().getById(Id);
    }

    /**
     * @throws BloodException
     */
    public List<Donor> getAll() throws BloodException{
        return DaoFactory.donorDao().getAll();
    }

    /**
     * @param Donor_id
     * @throws BloodException
     */
    public Donor getById(int Donor_id) throws BloodException {
        return DaoFactory.donorDao().getById(Donor_id);
    }

    /**
     * @param text
     * @return attributes that describe donor with specified name
     * @throws BloodException
     */
    public static List<Donor> searchDonors(String text) throws BloodException {
        return (DaoFactory.donorDao().searchByName(text));
    }
}
